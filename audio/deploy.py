# !/usr/bin/env python3
import os
import sys
import time
import shutil
import hashlib
from pathlib import Path
from typing import Optional, Dict, List
import subprocess
import json
from disc import PicoDiskFinder

class PicoRP2Deployer:
    def __init__(self):
        self.finder = PicoDiskFinder()  # z poprzedniego kodu
        self.rp2_path = None
        self.deployment_log = []
        self.config = {
            'timeout': 30,
            'verify_checksum': True,
            'make_backup': True,
            'allowed_extensions': ['.py', '.txt', '.json', '.uf2'],
            'backup_dir': 'pico_backups',
            'ignore_patterns': ['__pycache__', '*.pyc', '.git', '.vscode'],
        }

    def prepare_deployment(self) -> bool:
        """Przygotowanie do wdro≈ºenia"""
        print("üîç Szukam dysku RPI-RP2...")

        try:
            self.rp2_path = self.finder.wait_for_rp2(timeout=self.config['timeout'])
            if not self.rp2_path:
                print("‚ùå Nie znaleziono dysku RPI-RP2!")
                return False

            print(f"‚úÖ Znaleziono dysk RPI-RP2: {self.rp2_path}")

            if not self.finder.verify_rp2_disk(self.rp2_path):
                print("‚ùå Weryfikacja dysku nie powiod≈Ça siƒô!")
                return False

            if self.config['make_backup']:
                self.create_backup()

            return True

        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas przygotowania: {e}")
            return False

    def create_backup(self):
        """Tworzenie kopii zapasowej zawarto≈õci Pico"""
        try:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            backup_dir = Path(self.config['backup_dir']) / timestamp
            backup_dir.mkdir(parents=True, exist_ok=True)

            print(f"üìÇ Tworzenie kopii zapasowej w: {backup_dir}")

            # Kopiowanie plik√≥w
            for item in Path(self.rp2_path).iterdir():
                if item.is_file():
                    shutil.copy2(item, backup_dir)
                else:
                    shutil.copytree(item, backup_dir / item.name)

            # Zapisz metadane
            metadata = {
                'timestamp': timestamp,
                'source': str(self.rp2_path),
                'files': [str(f.relative_to(backup_dir)) for f in backup_dir.rglob('*') if f.is_file()]
            }

            with open(backup_dir / 'backup_metadata.json', 'w') as f:
                json.dump(metadata, f, indent=2)

            print(f"‚úÖ Kopia zapasowa utworzona: {len(metadata['files'])} plik√≥w")

        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd podczas tworzenia kopii zapasowej: {e}")

    def calculate_checksum(self, file_path: Path) -> str:
        """Obliczanie sumy kontrolnej pliku"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def verify_deployment(self, source_files: Dict[str, str], deployed_path: Path) -> bool:
        """Weryfikacja poprawno≈õci wdro≈ºenia"""
        print("üîç Weryfikacja wdro≈ºenia...")
        errors = []

        for rel_path, checksum in source_files.items():
            deployed_file = deployed_path / rel_path
            if not deployed_file.exists():
                errors.append(f"Brak pliku: {rel_path}")
                continue

            deployed_checksum = self.calculate_checksum(deployed_file)
            if deployed_checksum != checksum:
                errors.append(f"Niezgodno≈õƒá sumy kontrolnej: {rel_path}")

        if errors:
            print("‚ùå Znaleziono b≈Çƒôdy podczas weryfikacji:")
            for error in errors:
                print(f"  - {error}")
            return False

        print("‚úÖ Weryfikacja zako≈Ñczona sukcesem")
        return True

    def deploy(self, source_path: str or Path, deploy_type: str = 'all') -> bool:
        """Wdro≈ºenie plik√≥w na Pico"""
        source_path = Path(source_path)
        if not source_path.exists():
            print(f"‚ùå ≈öcie≈ºka ≈∫r√≥d≈Çowa nie istnieje: {source_path}")
            return False

        try:
            # Przygotowanie
            if not self.prepare_deployment():
                return False

            print(f"\nüì§ Rozpoczynam wdra≈ºanie z: {source_path}")
            self.deployment_log.append(f"Rozpoczƒôcie wdra≈ºania: {time.strftime('%Y-%m-%d %H:%M:%S')}")

            # Zbierz pliki do wdro≈ºenia
            files_to_deploy = {}
            total_size = 0

            for file_path in source_path.rglob('*'):
                if file_path.is_file():
                    # Sprawd≈∫ czy plik powinien byƒá pominiƒôty
                    if any(pattern in str(file_path) for pattern in self.config['ignore_patterns']):
                        continue

                    # Sprawd≈∫ rozszerzenie
                    if deploy_type != 'all' and file_path.suffix not in self.config['allowed_extensions']:
                        continue

                    rel_path = file_path.relative_to(source_path)
                    files_to_deploy[str(rel_path)] = self.calculate_checksum(file_path)
                    total_size += file_path.stat().st_size

            # Sprawd≈∫ dostƒôpne miejsce
            disk_info = self.finder.get_disk_info(self.rp2_path)
            if total_size > disk_info['free_space']:
                print(
                    f"‚ùå Za ma≈Ço miejsca na dysku! Potrzebne: {total_size / 1024:.1f}KB, Dostƒôpne: {disk_info['free_space'] / 1024:.1f}KB")
                return False

            print(f"\nüì¶ Znaleziono {len(files_to_deploy)} plik√≥w do wdro≈ºenia ({total_size / 1024:.1f}KB)")

            # Wdra≈ºanie plik√≥w
            for rel_path, checksum in files_to_deploy.items():
                source_file = source_path / rel_path
                target_file = Path(self.rp2_path) / rel_path

                # Utw√≥rz katalogi je≈õli nie istniejƒÖ
                target_file.parent.mkdir(parents=True, exist_ok=True)

                # Kopiuj plik
                print(f"üìÑ Kopiowanie: {rel_path}")
                shutil.copy2(source_file, target_file)
                self.deployment_log.append(f"Skopiowano: {rel_path}")

            # Weryfikacja
            if self.config['verify_checksum']:
                if not self.verify_deployment(files_to_deploy, Path(self.rp2_path)):
                    return False

            print("\n‚úÖ Wdro≈ºenie zako≈Ñczone sukcesem!")
            self.save_deployment_log()
            return True

        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas wdra≈ºania: {e}")
            self.deployment_log.append(f"B≈ÇƒÖd: {str(e)}")
            self.save_deployment_log()
            return False

    def save_deployment_log(self):
        """Zapisywanie logu wdro≈ºenia"""
        log_dir = Path('deployment_logs')
        log_dir.mkdir(exist_ok=True)

        timestamp = time.strftime("%Y%m%d_%H%M%S")
        log_file = log_dir / f"deploy_log_{timestamp}.txt"

        with open(log_file, 'w') as f:
            for entry in self.deployment_log:
                f.write(f"{entry}\n")

    def deploy_uf2(self, uf2_path: str or Path) -> bool:
        """Wdro≈ºenie pliku UF2"""
        uf2_path = Path(uf2_path)
        if not uf2_path.exists() or uf2_path.suffix != '.uf2':
            print("‚ùå Nieprawid≈Çowy plik UF2")
            return False

        try:
            if not self.prepare_deployment():
                return False

            print(f"\nüì§ Wdra≈ºanie pliku UF2: {uf2_path.name}")

            # Kopiuj plik UF2
            target_path = Path(self.rp2_path) / uf2_path.name
            shutil.copy2(uf2_path, target_path)

            print("‚úÖ Plik UF2 skopiowany. Pico powinno siƒô zrestartowaƒá.")
            return True

        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas wdra≈ºania UF2: {e}")
            return False


def main():
    import argparse

    parser = argparse.ArgumentParser(description="Narzƒôdzie do wdra≈ºania na Raspberry Pi Pico (RPI-RP2)")
    parser.add_argument("source", help="≈öcie≈ºka ≈∫r√≥d≈Çowa do wdro≈ºenia")
    parser.add_argument("--type", choices=['all', 'code', 'uf2'], default='all',
                        help="Typ wdro≈ºenia (domy≈õlnie: all)")
    parser.add_argument("--no-backup", action="store_true",
                        help="Wy≈ÇƒÖcz tworzenie kopii zapasowej")
    parser.add_argument("--no-verify", action="store_true",
                        help="Wy≈ÇƒÖcz weryfikacjƒô wdro≈ºenia")

    args = parser.parse_args()

    deployer = PicoRP2Deployer()

    # Konfiguracja na podstawie argument√≥w
    deployer.config['make_backup'] = not args.no_backup
    deployer.config['verify_checksum'] = not args.no_verify

    # Wdro≈ºenie
    if args.type == 'uf2':
        success = deployer.deploy_uf2(args.source)
    else:
        success = deployer.deploy(args.source, args.type)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
